{"version":3,"sources":["components/GenotypeModal/index.jsx","components/LookupAssemblyModal/index.jsx","components/ModeIndicator/index.jsx","components/Queue/QueueModal/QueueFeedback/index.jsx","components/Queue/QueueModal/ScannedCodes/index.jsx","components/Queue/QueueModal/index.jsx","components/Queue/index.jsx","components/Scanner/index.jsx","components/Settings/index.jsx","components/App/index.jsx","serviceWorker.js","constants/index.js","helpers/scanner.js","helpers/airtable.js","stores/index.js","index.js"],"names":["_GenotypeModal","_closeModal","_this","props","appStore","closeGenotypeModal","this","react_default","a","createElement","Modal","open","showGenotypeModal","data-testid","Header","Content","errorMessage","Message","color","icon","content","Fragment","scannedGenotype","POT","GENOTYPE","Actions","Button","onClick","Component","GenotypeModal","inject","observer","LookupAssemblyModal","_ref","carrots","Object","toConsumableArray","Array","lookupAssemblyCounter","keys","isBuildingLookup","lookupAssemblyError","map","carrot","index","key","concat","role","aria-label","primary","assembleLookupForMode","Wrapper","styled","div","_templateObject","ModeIndicator","activeMode","numberOfCrosses","afterScanning","name","Icon","QueueFeedback","successMessage","Row","ScannedCodes_templateObject","Cell","_templateObject2","HeaderCell","_templateObject3","_ScannedCodes","scannedCodes","scan","_scannedCode","length","potNumber","sterile","Checkbox","toggle","onChange","toggleSterility","checked","disabled","includes","ScannedCodes","ActionWrapper","QueueModal_templateObject","Flexer","QueueModal_templateObject2","_QueueModal","closeQueueModal","_clearQueue","clearQueue","_proceed","nextOrSave","showQueueModal","QueueModal_QueueFeedback","QueueModal_ScannedCodes","discardButtonDisabled","saveButtonText","loading","isLoading","QueueModal","QueueWrapper","Queue_templateObject","QueueButton","Queue_templateObject2","_Queue","_openQueueModal","openQueueModal","size","Queue_QueueModal","Queue","Scanner_templateObject","_Scanner","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_startScanner","initializeScanner","videoRef","React","createRef","Scanner_Wrapper","ref","playsInline","Scanner","SettingsWrapper","Settings_templateObject","_Settings","_toggleSettingsModal","toggleSettingsModal","_setActiveModeName","e","value","setActiveMode","_setCamera","_ref2","changeCamera","cameraOptions","cameras","camera","text","id","showSettingsModal","as","Group","active","toggleAfterScanning","modes","mode","crosses","cross","setNumberOfCrosses","Dropdown","options","selection","fluid","activeCamera","Settings","AppWrapper","App_templateObject","window","innerHeight","_App","components_ModeIndicator","components_Scanner","components_Settings","components_Queue","components_LookupAssemblyModal","components_GenotypeModal","App","Boolean","location","hostname","match","POTNUMBER_REGEX","Airtable","configure","endpointUrl","apiKey","airtableBase","base","AppStore","arguments","undefined","lookup","_determinMirroring","innerWidth","lookupAssemblyInterval","setInterval","runInAction","clearInterval","_this2","lookupTable","table","startLookupAssembly","lookupKey","fields","Promise","resolve","reject","select","eachPage","records","fetchNextPage","forEach","record","fieldValue","get","recordObject","objectSpread","err","assembleLookupTable","then","stopLookupAssembly","catch","error","modeName","newMode","find","store","scanner","Instascan","video","current","mirror","addListener","handleContent","Camera","getCameras","setCameras","start","console","string","exec","getPotNumber","lookedUp","push","scannedContent","code","cameraId","_this3","newCamera","stop","postScannedCodes","result","number","NUMBER","lookupLink1","lookupLink2","lookupLink3","lookupLink4","sterility1","sterility2","sterility3","sterility4","_this4","tableId","entry","newEntry","DATE OF CROSS","Date","toISOString","POT ID 1","POT ID 2","POT ID 3","POT ID 4","STERILITY 1","STERILITY 2","STERILITY 3","STERILITY 4","create","airtablePostSuccess","airtablePostError","message","decorate","observable","action","setActiveCamera","Sentry","dsn","enforceActions","stores","ReactDOM","render","index_module","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64d642a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Button, Message, Modal } from \"semantic-ui-react\";\n\nclass _GenotypeModal extends Component {\n  _closeModal = () => {\n    this.props.appStore.closeGenotypeModal();\n  };\n\n  render() {\n    const { appStore } = this.props;\n    return (\n      <Modal open={appStore.showGenotypeModal} data-testid=\"genotype-modal\">\n        <Modal.Header>Genotype of scanned pot number</Modal.Header>\n        <Modal.Content>\n          {!appStore.errorMessage ? (\n            <React.Fragment>\n              <h4>pot: {appStore.scannedGenotype.POT}</h4>\n              <h2>genotype: {appStore.scannedGenotype.GENOTYPE}</h2>\n            </React.Fragment>\n          ) : (\n            <Message\n              color=\"red\"\n              icon=\"times circle outline\"\n              content={appStore.errorMessage}\n            />\n          )}\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            onClick={this._closeModal}\n            data-testid=\"genotype-modal-close-button\"\n            color=\"blue\"\n          >\n            close\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nconst GenotypeModal = inject(\"appStore\")(observer(_GenotypeModal));\n\nexport default GenotypeModal;\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Button, Message, Modal } from \"semantic-ui-react\";\n\nconst _LookupAssemblyModal = ({ appStore }) => {\n  const carrots = [...Array((appStore.lookupAssemblyCounter % 5) + 1).keys()];\n  return (\n    <Modal open={appStore.isBuildingLookup} data-testid=\"lookup-assembly-modal\">\n      <Modal.Header>Building lookup table...</Modal.Header>\n      <Modal.Content>\n        {appStore.lookupAssemblyError ? (\n          <Message color=\"red\" data-testid=\"lookup-error-message\">\n            Could not assemble lookup table!\n          </Message>\n        ) : (\n          <React.Fragment>\n            {carrots.map((carrot, index) => (\n              <span\n                key={`${index}-carrot`}\n                role=\"img\"\n                aria-label=\"carrot\"\n                data-testid=\"carrot\"\n              >\n                🥕{\" \"}\n              </span>\n            ))}\n          </React.Fragment>\n        )}\n      </Modal.Content>\n      {appStore.lookupAssemblyError ? (\n        <Modal.Actions>\n          <Button\n            primary\n            onClick={() => appStore.assembleLookupForMode()}\n            data-testid=\"lookup-error-retry-button\"\n          >\n            retry\n          </Button>\n        </Modal.Actions>\n      ) : null}\n    </Modal>\n  );\n};\n\nconst LookupAssemblyModal = inject(\"appStore\")(observer(_LookupAssemblyModal));\n\nexport default LookupAssemblyModal;\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport styled from \"styled-components\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst Wrapper = styled.div`\n  z-index: 10;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 40px;\n  color: white;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst _ModeIndicator = ({ appStore }) => {\n  const { activeMode, numberOfCrosses, afterScanning } = appStore;\n  return (\n    <Wrapper>\n      <span>\n        {activeMode.name} - {numberOfCrosses}{\" \"}\n        <Icon name={afterScanning === \"see\" ? \"eye\" : \"save\"} />\n      </span>\n    </Wrapper>\n  );\n};\n\nconst ModeIndicator = inject(\"appStore\")(observer(_ModeIndicator));\n\nexport default ModeIndicator;\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Message } from \"semantic-ui-react\";\n\nconst _QueueFeedback = ({ appStore }) => {\n  const { errorMessage, successMessage } = appStore;\n\n  return (\n    <div>\n      {errorMessage ? (\n        <Message\n          color=\"red\"\n          icon=\"times circle outline\"\n          content={errorMessage}\n          data-testid=\"queue-feedback-error\"\n        />\n      ) : null}\n      {successMessage ? (\n        <Message\n          color=\"green\"\n          icon=\"check circle outline\"\n          content={successMessage}\n          data-testid=\"queue-feedback-success\"\n        />\n      ) : null}\n    </div>\n  );\n};\n\nconst QueueFeedback = inject(\"appStore\")(observer(_QueueFeedback));\n\nexport default QueueFeedback;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport styled from \"styled-components\";\nimport { Checkbox } from \"semantic-ui-react\";\n\nconst Row = styled.div`\n  display: flex;\n  padding: 1rem 0;\n`;\n\nconst Cell = styled.div`\n  flex: 1;\n`;\n\nconst HeaderCell = styled(Cell)`\n  font-weight: bold;\n`;\n\nclass _ScannedCodes extends Component {\n  render() {\n    const { appStore } = this.props;\n\n    const { scannedCodes, numberOfCrosses } = appStore;\n\n    return (\n      <React.Fragment>\n        <Row>\n          <HeaderCell>step</HeaderCell>\n          <HeaderCell>Pot number</HeaderCell>\n          <HeaderCell>Sterility</HeaderCell>\n        </Row>\n\n        {[...Array(numberOfCrosses).keys()].map((scan, index) => {\n          let scannedCode;\n          if (scannedCodes.length > index) {\n            scannedCode = scannedCodes[index];\n          } else {\n            scannedCode = {};\n          }\n          const { potNumber, sterile } = scannedCode;\n          return (\n            <Row key={`scan-${index}`}>\n              <Cell>{index + 1}</Cell>\n              <Cell>{potNumber || \"-\"}</Cell>\n              <Cell>\n                <Checkbox\n                  data-testid=\"sterility-toggle\"\n                  toggle\n                  onChange={() => appStore.toggleSterility(index)}\n                  checked={sterile}\n                  disabled={![true, false].includes(sterile)}\n                />\n              </Cell>\n            </Row>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ScannedCodes = inject(\"appStore\")(observer(_ScannedCodes));\n\nexport default ScannedCodes;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Button, Modal } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nimport QueueFeedback from \"./QueueFeedback\";\nimport ScannedCodes from \"./ScannedCodes\";\n\nconst ActionWrapper = styled.div`\n  display: flex;\n  margin-bottom: 1rem;\n`;\n\nconst Flexer = styled.div`\n  flex: 1;\n`;\n\nclass _QueueModal extends Component {\n  _closeModal = () => {\n    this.props.appStore.closeQueueModal();\n  };\n\n  _clearQueue = () => {\n    this.props.appStore.clearQueue();\n  };\n\n  _proceed = () => {\n    this.props.appStore.nextOrSave();\n  }\n\n  render() {\n    const { appStore } = this.props;\n    return (\n      <Modal open={appStore.showQueueModal} data-testid=\"queue-modal\">\n        <Modal.Header>Scan Queue</Modal.Header>\n        <Modal.Content>\n          <QueueFeedback />\n          <ScannedCodes />\n        </Modal.Content>\n        <Modal.Actions>\n          <ActionWrapper>\n            <Button\n              onClick={this._closeModal}\n              data-testid=\"queue-modal-close-button\"\n            >\n              close\n            </Button>\n            <Flexer />\n            <Button\n              onClick={this._clearQueue}\n              color=\"red\"\n              data-testid=\"queue-modal-discard-button\"\n              disabled={appStore.discardButtonDisabled}\n            >\n              discard\n            </Button>\n            <Button\n              onClick={this._proceed}\n              color=\"green\"\n              data-testid=\"queue-modal-confirm-button\"\n              content={appStore.saveButtonText}\n              loading={appStore.isLoading}\n            />\n          </ActionWrapper>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nconst QueueModal = inject(\"appStore\")(observer(_QueueModal));\n\nexport default QueueModal;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Button } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nimport QueueModal from \"./QueueModal\";\n\nconst QueueWrapper = styled.div`\n  background: transparent;\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding: 1rem;\n`;\n\nconst QueueButton = styled(Button)`\n  margin-right: 0px !important;\n`;\n\nclass _Queue extends Component {\n  _openQueueModal = () => {\n    this.props.appStore.openQueueModal();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <QueueWrapper>\n          <QueueButton\n            icon=\"inbox\"\n            data-testid=\"queue-button\"\n            onClick={this._openQueueModal}\n            size=\"massive\"\n            color=\"green\"\n          />\n        </QueueWrapper>\n        <QueueModal />\n      </React.Fragment>\n    );\n  }\n}\n\nconst Queue = inject(\"appStore\")(observer(_Queue));\n\nexport default Queue;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\n\nconst Wrapper = styled.div`\n  height: calc(100%);\n  width: 100vw;\n\n  > video {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`\n\nclass _Scanner extends Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this._startScanner();\n  }\n\n  _startScanner = () => {\n    this.props.appStore.initializeScanner(this.videoRef)\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Wrapper>\n          <video ref={this.videoRef} playsInline />\n        </Wrapper>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Scanner = inject(\"appStore\")(observer(_Scanner));\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Button, Dropdown, Header, Modal } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nconst SettingsWrapper = styled.div`\n  background: transparent;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding: 1rem;\n`;\n\nclass _Settings extends Component {\n  _toggleSettingsModal = () => {\n    this.props.appStore.toggleSettingsModal();\n  };\n\n  _setActiveModeName = (e, { value }) => {\n    this.props.appStore.setActiveMode(value);\n  };\n\n  _setCamera = (e, { value }) => {\n    this.props.appStore.changeCamera(value);\n  };\n\n  render() {\n    const { appStore } = this.props;\n    // const modeOptions = appStore.modes.map(mode => {\n    //   return { text: mode.name, value: mode.name };\n    // });\n    const cameraOptions = appStore.cameras.map(camera => {\n      return { text: camera.name, value: camera.id };\n    });\n\n    return (\n      <React.Fragment>\n        <SettingsWrapper>\n          <Button\n            icon=\"setting\"\n            data-testid=\"settings-button\"\n            onClick={this._toggleSettingsModal}\n            size=\"massive\"\n            color=\"pink\"\n          />\n        </SettingsWrapper>\n        <Modal open={appStore.showSettingsModal} data-testid=\"settings-modal\">\n          <Modal.Header>Settings</Modal.Header>\n          <Modal.Content>\n            <Header as=\"h3\">After Scanning...</Header>\n            <Button.Group>\n              <Button\n                icon=\"save\"\n                content=\"save\"\n                active={appStore.afterScanning === \"save\"}\n                onClick={() => appStore.toggleAfterScanning()}\n              />\n              <Button\n                icon=\"eye\"\n                content=\"see\"\n                active={appStore.afterScanning === \"see\"}\n                onClick={() => appStore.toggleAfterScanning()}\n              />\n            </Button.Group>\n            <Header as=\"h3\">Mode</Header>\n            <Button.Group>\n              {appStore.modes.map((mode, index) => {\n                return (\n                  <Button\n                    key={`mode-${index}`}\n                    active={mode.name === appStore.activeMode.name}\n                    onClick={() => appStore.setActiveMode(mode.name)}\n                    data-testid=\"mode-switch-button\"\n                  >\n                    {mode.name}\n                  </Button>\n                );\n              })}\n            </Button.Group>\n            <Header as=\"h3\">Number of crosses</Header>\n            <Button.Group>\n              {appStore.crosses.map((cross, index) => {\n                return (\n                  <Button\n                    key={`cross-${cross}`}\n                    active={cross === appStore.numberOfCrosses}\n                    onClick={() => appStore.setNumberOfCrosses(cross)}\n                    data-testid=\"crosses-switch-button\"\n                  >\n                    {cross}\n                  </Button>\n                );\n              })}\n            </Button.Group>\n            <Header as=\"h3\">Camera</Header>\n            {appStore.cameras.length ? (\n              <Dropdown\n                data-testid=\"camera-select\"\n                options={cameraOptions}\n                selection\n                fluid\n                onChange={this._setCamera}\n                value={appStore.activeCamera ? appStore.activeCamera.id : \"\"}\n                text={appStore.activeCamera ? appStore.activeCamera.name : \"\"}\n              />\n            ) : (\n              <p>No cameras... is the site loaded via https?</p>\n            )}\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              primary\n              onClick={this._toggleSettingsModal}\n              data-testid=\"settings-modal-save\"\n            >\n              ok\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Settings = inject(\"appStore\")(observer(_Settings));\n\nexport default Settings;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\nimport GenotypeModal from \"./../GenotypeModal\"\nimport LookupAssemblyModal from \"./../LookupAssemblyModal\"\nimport ModeIndicator from \"./../ModeIndicator\"\nimport Queue from \"./../Queue\";\nimport Scanner from \"./../Scanner\";\nimport Settings from \"./../Settings\";\n\nconst AppWrapper = styled.div`\n  height: ${window.innerHeight}px;\n  width: 100vw;\n  overflow: hidden;\n  position: relative;\n`;\n\nclass _App extends Component {\n  render() {\n    return (\n      <AppWrapper>\n        <ModeIndicator />\n        <Scanner />\n        <Settings />\n        <Queue />\n        <LookupAssemblyModal />\n        <GenotypeModal />\n      </AppWrapper>\n    );\n  }\n}\n\nconst App = inject(\"appStore\")(observer(_App));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const AIRTABLE_API_KEY = \"key5ofWaqgEdz6Lku\";\nexport const AIRTABLE_ID = \"appfg7BuOITypaNZN\";\n\nexport const MODES = [\n  {\n    name: \"Scott\",\n    lookupTable: {\n      table: \"CARROT LOOKUP\",\n      fields: [\"POT\", \"GENOTYPE\"],\n      lookupKey: \"POT\"\n    },\n    table: \"SCOTT BREEDING\"\n  },\n  {\n    name: \"Carrots\",\n    lookupTable: {\n      table: \"CARROT LOOKUP\",\n      fields: [\"POT\", \"GENOTYPE\"],\n      lookupKey: \"POT\"\n    },\n    table: \"CARROT BREEDING\"\n  },\n  {\n    name: \"Beets\",\n    lookupTable: {\n      table: \"BEET LOOKUP\",\n      fields: [\"POT\", \"GENOTYPE\"],\n      lookupKey: \"POT\"\n    },\n    table: \"BEET BREEDING\"\n  }\n];\n\nexport const CROSSES = [1, 2, 3, 4];\n\nexport const ERROR_NOT_FOUND_IN_LOOKUP =\n  \"Pot number not found in lookup table:\";\n","const UID_REGEX = /{uid_(.+?)}/i;\nconst GENOTYPE_REGEX = /{genotype_(.+?)}/i;\nconst POTNUMBER_REGEX = /^([0-9]{4})$/;\n\nexport const getUid = string => {\n  const match = UID_REGEX.exec(string);\n  if (match && match[1]) {\n    return match[1];\n  }\n  return null;\n};\n\nexport const getGenotype = string => {\n  const match = GENOTYPE_REGEX.exec(string);\n  if (match && match[1]) {\n    return match[1];\n  }\n  return null;\n};\n\nexport const getPotNumber = string => {\n  const match = POTNUMBER_REGEX.exec(string);\n  if (match && match[1]) {\n    return match[1];\n  }\n  return null;\n};\n","import { AIRTABLE_API_KEY, AIRTABLE_ID } from \"./../constants\";\n\nconst Airtable = window.Airtable;\n\nAirtable.configure({\n  endpointUrl: \"https://api.airtable.com\",\n  apiKey: AIRTABLE_API_KEY\n});\n\nexport const airtableBase = Airtable.base(AIRTABLE_ID);\n\n/**\n * posts scanned codes to airtable \n * @param {string} tableId \n * @param {object} entry \n */\nexport const postEntryToAirtable = (tableId, entry) => {\n  return new Promise((resolve, reject) => {\n    airtableBase(tableId).create(entry, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\n/**\n * creates a cache of the airtable lookup table\n * @param {string} lookupKey - the column name to be looked up\n * @param {array} fields - the fields to retrive from airtable\n */\nexport const assembleLookupTable = (lookupTable, lookupKey, fields) => {\n  const lookup = {};\n  const promise = new Promise((resolve, reject) => {\n    airtableBase(lookupTable)\n      .select({ fields: fields })\n      .eachPage(\n        (records, fetchNextPage) => {\n          records.forEach(record => {\n            const fieldValue = record.get(lookupKey);\n            const id = record.id;\n            const recordObject = {...record.fields, id}\n            lookup[fieldValue] = recordObject;\n          });\n\n          fetchNextPage();\n        },\n        // this is called when done\n        err => {\n          if (err) {\n            reject(err);\n          }\n          resolve(lookup);\n        }\n      );\n  });\n  return promise;\n};\n","import { observable, action, decorate, runInAction } from \"mobx\";\n\nimport { MODES, CROSSES, ERROR_NOT_FOUND_IN_LOOKUP } from \"./../constants\";\nimport { getPotNumber } from \"./../helpers/scanner\";\nimport {\n  assembleLookupTable,\n  postEntryToAirtable\n} from \"./../helpers/airtable\";\n\nclass AppStore {\n  showQueueModal = false;\n  modes = [];\n  crosses = [];\n  activeMode;\n  numberOfCrosses;\n  showSettingsModal = false;\n  cameras = [];\n  activeCamera;\n  scanner;\n  scannedContent;\n  scannedCodes = [];\n  errorMessage = \"\";\n  successMessage = \"\";\n  // is interacting with airtable?\n  isLoading = false;\n  // what happens after scanning?\n  afterScanning = \"save\";\n  // show modal that displays the genotype of the scanned pot number\n  showGenotypeModal = false;\n  // result from lookup for scanned pot number\n  scannedGenotype = {};\n\n  isBuildingLookup = false;\n  lookupAssemblyError = false;\n  lookupAssemblyCounter = 0;\n  lookup = {};\n\n  constructor(modes = [], crosses = []) {\n    this.modes = modes;\n    this.crosses = crosses;\n    this.activeMode = modes[0];\n    this.numberOfCrosses = crosses[0];\n\n    this.assembleLookupForMode();\n  }\n\n  toggleAfterScanning() {\n    if (this.afterScanning === \"see\") {\n      this.afterScanning = \"save\";\n    } else {\n      this.afterScanning = \"see\";\n    }\n  }\n\n  closeGenotypeModal() {\n    this.showGenotypeModal = false;\n    this.errorMessage = \"\";\n  }\n\n  startLookupAssembly() {\n    this.lookupAssemblyError = false;\n    this.isBuildingLookup = true;\n    this.lookupAssemblyInterval = setInterval(\n      () => runInAction(() => (this.lookupAssemblyCounter += 1)),\n      1000\n    );\n  }\n\n  stopLookupAssembly() {\n    this.isBuildingLookup = false;\n    clearInterval(this.lookupAssemblyInterval);\n    this.lookupAssemblyCounter = 0;\n  }\n\n  assembleLookupForMode() {\n    if (\n      this.activeMode.lookupTable.table &&\n      !Object.keys(this.lookup).includes(this.activeMode.lookupTable.table)\n    ) {\n      runInAction(() => this.startLookupAssembly());\n      assembleLookupTable(\n        this.activeMode.lookupTable.table,\n        this.activeMode.lookupTable.lookupKey,\n        this.activeMode.lookupTable.fields\n      )\n        .then(lookup => {\n          runInAction(\n            () => (this.lookup[this.activeMode.lookupTable.table] = lookup)\n          );\n          runInAction(() => this.stopLookupAssembly());\n        })\n        .catch(error => {\n          if (error) {\n            runInAction(() => {\n              this.lookupAssemblyError = true;\n              clearInterval(this.lookupAssemblyInterval);\n              this.lookupAssemblyCounter = 0;\n            });\n          } else {\n            runInAction(() => {\n              this.stopLookupAssembly();\n            });\n          }\n        });\n    }\n  }\n\n  setActiveMode(modeName) {\n    const newMode = this.modes.find(mode => mode.name === modeName);\n    this.activeMode = newMode;\n    this.clearQueue();\n    // this.assembleLookupForMode();\n  }\n\n  setNumberOfCrosses(crosses) {\n    this.numberOfCrosses = crosses;\n    this.clearQueue();\n  }\n\n  toggleSettingsModal() {\n    this.showSettingsModal = !this.showSettingsModal;\n    if (!this.showSettingsModal) {\n      this.assembleLookupForMode();\n    }\n  }\n\n  _determinMirroring = () => {\n    const windowWidth = window.innerWidth;\n\n    if (windowWidth > 1024) {\n      return true;\n    }\n\n    return false;\n  };\n\n  setCameras(cameras) {\n    this.cameras = cameras;\n    this.activeCamera = cameras[0];\n  }\n\n  initializeScanner(videoRef) {\n    const store = this;\n\n    const scanner = new window.Instascan.Scanner({\n      video: videoRef.current,\n      mirror: store._determinMirroring()\n    });\n\n    store.scanner = scanner;\n    store.scanner.addListener(\"scan\", content => {\n      store.handleContent(content);\n    });\n\n    window.Instascan.Camera.getCameras()\n      .then(function(cameras) {\n        if (cameras.length > 0) {\n          store.setCameras(cameras);\n          store.scanner.start(store.activeCamera);\n        } else {\n          console.error(\"No cameras found.\");\n        }\n      })\n      .catch(function(e) {\n        console.error(e);\n      });\n  }\n\n  handleContent(content) {\n    this.errorMessage = \"\";\n    // Don't scan if modal is open\n    if (this.showQueueModal) {\n      return;\n    }\n\n    const potNumber = getPotNumber(content);\n\n    // if all they want to see is the genotype...\n    if (this.afterScanning === \"see\") {\n      const lookedUp = this.lookup[this.activeMode.lookupTable.table][\n        potNumber\n      ];\n      if (lookedUp) {\n        this.scannedGenotype = lookedUp || {};\n      } else {\n        this.errorMessage = `${ERROR_NOT_FOUND_IN_LOOKUP} ${potNumber}`;\n      }\n      this.showGenotypeModal = true;\n      return;\n    }\n\n    this.showQueueModal = true;\n    if (potNumber) {\n      const lookedUp = this.lookup[this.activeMode.lookupTable.table][\n        potNumber\n      ];\n      if (!lookedUp) {\n        this.scannedContent = content;\n        this.errorMessage = `${ERROR_NOT_FOUND_IN_LOOKUP} ${potNumber}`;\n      } else {\n        this.scannedCodes.push({ potNumber, sterile: false });\n      }\n    } else {\n      this.scannedContent = content;\n      this.errorMessage = \"Pot number not found in QR code\";\n    }\n  }\n\n  toggleSterility(index) {\n    const code = this.scannedCodes[index];\n    code.sterile = !code.sterile;\n  }\n\n  changeCamera(cameraId) {\n    const newCamera = this.cameras.find(camera => camera.id === cameraId);\n    this.scanner.stop().then(() => {\n      this.scanner.start(newCamera);\n      runInAction(() => {\n        this.activeCamera = newCamera;\n      });\n    });\n  }\n\n  setActiveCamera(camera) {\n    this.activeCamera = camera;\n  }\n\n  openQueueModal() {\n    this.showQueueModal = true;\n  }\n\n  closeQueueModal() {\n    this.showQueueModal = false;\n    this.errorMessage = \"\";\n    this.successMessage = \"\";\n  }\n\n  clearQueue() {\n    this.scannedCodes = [];\n    this.errorMessage = \"\";\n    this.successMessage = \"\";\n  }\n\n  get discardButtonDisabled() {\n    return !this.scannedCodes.length || this.isLoading;\n  }\n\n  get saveButtonText() {\n    if (this.scannedCodes.length === this.numberOfCrosses) {\n      return \"save\";\n    } else {\n      return \"next\";\n    }\n  }\n\n  nextOrSave() {\n    if (this.scannedCodes.length < this.numberOfCrosses) {\n      this.closeQueueModal();\n    } else {\n      this.postScannedCodes();\n    }\n  }\n\n  airtablePostSuccess(result) {\n    const number = result.fields.NUMBER;\n    this.isLoading = false;\n    this.scannedCodes = [];\n    this.successMessage = `Entry saved with number ${number}. Good luck!`;\n  }\n\n  airtablePostError(errorMessage) {\n    this.isLoading = false;\n    this.errorMessage = errorMessage;\n  }\n\n  postScannedCodes() {\n    const mode = this.activeMode;\n\n    runInAction(() => (this.isLoading = true));\n\n    // TODO put this in helpers/airtable --> assemblePayload\n\n    let lookupLink1, lookupLink2, lookupLink3, lookupLink4;\n    let sterility1, sterility2, sterility3, sterility4;\n\n    // TODO: this could go into a function...\n    // POT 1\n    lookupLink1 = [\n      this.lookup[this.activeMode.lookupTable.table][\n        this.scannedCodes[0].potNumber\n      ].id\n    ];\n    sterility1 = this.scannedCodes[0].sterile ? \"S\" : \"F\";\n    // POT 2\n    try {\n      lookupLink2 = [\n        this.lookup[this.activeMode.lookupTable.table][\n          this.scannedCodes[1].potNumber\n        ].id\n      ];\n    } catch (error) {\n      lookupLink2 = [];\n    }\n    try {\n      sterility2 = this.scannedCodes[1].sterile ? \"S\" : \"F\";\n    } catch (error) {\n      sterility2 = null;\n    }\n    // POT 3\n    try {\n      lookupLink3 = [\n        this.lookup[this.activeMode.lookupTable.table][\n          this.scannedCodes[2].potNumber\n        ].id\n      ];\n    } catch (error) {\n      lookupLink3 = [];\n    }\n    try {\n      sterility3 = this.scannedCodes[2].sterile ? \"S\" : \"F\";\n    } catch (error) {\n      sterility3 = null;\n    }\n    // POT 4\n    try {\n      lookupLink4 = [\n        this.lookup[this.activeMode.lookupTable.table][\n          this.scannedCodes[3].potNumber\n        ].id\n      ];\n    } catch (error) {\n      lookupLink4 = [];\n    }\n    try {\n      sterility4 = this.scannedCodes[3].sterile ? \"S\" : \"F\";\n    } catch (error) {\n      sterility4 = null;\n    }\n    // DATE OF CROSS\n    const date = new Date();\n    const dateOfCross = date.toISOString();\n\n    const newEntry = {\n      \"DATE OF CROSS\": dateOfCross,\n      \"POT ID 1\": lookupLink1,\n      \"POT ID 2\": lookupLink2,\n      \"POT ID 3\": lookupLink3,\n      \"POT ID 4\": lookupLink4,\n      \"STERILITY 1\": sterility1,\n      \"STERILITY 2\": sterility2,\n      \"STERILITY 3\": sterility3,\n      \"STERILITY 4\": sterility4\n    };\n\n    postEntryToAirtable(mode.table, newEntry)\n      .then(result => this.airtablePostSuccess(result))\n      .catch(error => this.airtablePostError(error.message));\n  }\n}\n\ndecorate(AppStore, {\n  modes: observable,\n  crosses: observable,\n  activeMode: observable,\n  numberOfCrosses: observable,\n  showSettingsModal: observable,\n  cameras: observable,\n  activeCamera: observable,\n  scanner: observable,\n  showQueueModal: observable,\n  scannedContent: observable,\n  scannedCodes: observable,\n  successMessage: observable,\n  errorMessage: observable,\n  isLoading: observable,\n  afterScanning: observable,\n  showGenotypeModal: observable,\n  scannedGenotype: observable,\n\n  // lookup\n  isBuildingLookup: observable,\n  lookupAssemblyCounter: observable,\n  lookupAssemblyError: observable,\n  lookup: observable,\n\n  assembleLookupForMode: action,\n  setActiveMode: action,\n  setNumberOfCrosses: action,\n  toggleSettingsModal: action,\n  setCameras: action,\n  setActiveCamera: action,\n  changeCamera: action,\n  initializeScanner: action,\n  openQueueModal: action,\n  closeQueueModal: action,\n  clearQueue: action,\n  handleContent: action,\n  nextOrSave: action,\n  postScannedCodes: action,\n  airtablePostSuccess: action,\n  airtablePostError: action,\n  startLookupAssembly: action,\n  stopLookupAssembly: action,\n  toggleSterility: action,\n  toggleAfterScanning: action,\n  closeGenotypeModal: action\n});\n\nconst appStore = new AppStore(MODES, CROSSES);\n\nexport default appStore;\nwindow.appStore = appStore;\n\nexport { AppStore };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport { configure } from \"mobx\";\nimport * as Sentry from '@sentry/browser';\n\n\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport appStore from \"./stores\";\n\nSentry.init({\n dsn: \"https://21fe5a20a1fa4e5ba8fee26ec9cec189@sentry.io/1380593\"\n});\n\nconfigure({enforceActions: \"always\"})\n\nconst stores = {\n  appStore\n}\n\nReactDOM.render(\n  <Provider {...stores}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}